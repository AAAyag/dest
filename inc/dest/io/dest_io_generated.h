// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DESTIO_DEST_IO_H_
#define FLATBUFFERS_GENERATED_DESTIO_DEST_IO_H_

#include "flatbuffers/flatbuffers.h"


namespace dest {
namespace io {

struct MatrixF;
struct MatrixI;
struct TreeNode;
struct Tree;

struct MatrixF FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t rows() const { return GetField<int32_t>(4, 0); }
  int32_t cols() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<float> *data() const { return GetPointer<const flatbuffers::Vector<float> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* rows */) &&
           VerifyField<int32_t>(verifier, 6 /* cols */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct MatrixFBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) { fbb_.AddElement<int32_t>(4, rows, 0); }
  void add_cols(int32_t cols) { fbb_.AddElement<int32_t>(6, cols, 0); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<float>> data) { fbb_.AddOffset(8, data); }
  MatrixFBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MatrixFBuilder &operator=(const MatrixFBuilder &);
  flatbuffers::Offset<MatrixF> Finish() {
    auto o = flatbuffers::Offset<MatrixF>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MatrixF> CreateMatrixF(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t rows = 0,
   int32_t cols = 0,
   flatbuffers::Offset<flatbuffers::Vector<float>> data = 0) {
  MatrixFBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  return builder_.Finish();
}

struct MatrixI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t rows() const { return GetField<int32_t>(4, 0); }
  int32_t cols() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<int32_t> *data() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* rows */) &&
           VerifyField<int32_t>(verifier, 6 /* cols */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct MatrixIBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) { fbb_.AddElement<int32_t>(4, rows, 0); }
  void add_cols(int32_t cols) { fbb_.AddElement<int32_t>(6, cols, 0); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int32_t>> data) { fbb_.AddOffset(8, data); }
  MatrixIBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MatrixIBuilder &operator=(const MatrixIBuilder &);
  flatbuffers::Offset<MatrixI> Finish() {
    auto o = flatbuffers::Offset<MatrixI>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MatrixI> CreateMatrixI(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t rows = 0,
   int32_t cols = 0,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> data = 0) {
  MatrixIBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  return builder_.Finish();
}

struct TreeNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t idx1() const { return GetField<int32_t>(4, 0); }
  int32_t idx2() const { return GetField<int32_t>(6, 0); }
  float threshold() const { return GetField<float>(8, 0); }
  const MatrixF *mean() const { return GetPointer<const MatrixF *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* idx1 */) &&
           VerifyField<int32_t>(verifier, 6 /* idx2 */) &&
           VerifyField<float>(verifier, 8 /* threshold */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* mean */) &&
           verifier.VerifyTable(mean()) &&
           verifier.EndTable();
  }
};

struct TreeNodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_idx1(int32_t idx1) { fbb_.AddElement<int32_t>(4, idx1, 0); }
  void add_idx2(int32_t idx2) { fbb_.AddElement<int32_t>(6, idx2, 0); }
  void add_threshold(float threshold) { fbb_.AddElement<float>(8, threshold, 0); }
  void add_mean(flatbuffers::Offset<MatrixF> mean) { fbb_.AddOffset(10, mean); }
  TreeNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TreeNodeBuilder &operator=(const TreeNodeBuilder &);
  flatbuffers::Offset<TreeNode> Finish() {
    auto o = flatbuffers::Offset<TreeNode>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<TreeNode> CreateTreeNode(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t idx1 = 0,
   int32_t idx2 = 0,
   float threshold = 0,
   flatbuffers::Offset<MatrixF> mean = 0) {
  TreeNodeBuilder builder_(_fbb);
  builder_.add_mean(mean);
  builder_.add_threshold(threshold);
  builder_.add_idx2(idx2);
  builder_.add_idx1(idx1);
  return builder_.Finish();
}

struct Tree FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<TreeNode>> *nodes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TreeNode>> *>(4); }
  int32_t depth() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* nodes */) &&
           verifier.Verify(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           VerifyField<int32_t>(verifier, 6 /* depth */) &&
           verifier.EndTable();
  }
};

struct TreeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TreeNode>>> nodes) { fbb_.AddOffset(4, nodes); }
  void add_depth(int32_t depth) { fbb_.AddElement<int32_t>(6, depth, 0); }
  TreeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TreeBuilder &operator=(const TreeBuilder &);
  flatbuffers::Offset<Tree> Finish() {
    auto o = flatbuffers::Offset<Tree>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Tree> CreateTree(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TreeNode>>> nodes = 0,
   int32_t depth = 0) {
  TreeBuilder builder_(_fbb);
  builder_.add_depth(depth);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline const dest::io::Tree *GetTree(const void *buf) { return flatbuffers::GetRoot<dest::io::Tree>(buf); }

inline bool VerifyTreeBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<dest::io::Tree>(); }

inline void FinishTreeBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dest::io::Tree> root) { fbb.Finish(root); }

}  // namespace io
}  // namespace dest

#endif  // FLATBUFFERS_GENERATED_DESTIO_DEST_IO_H_
